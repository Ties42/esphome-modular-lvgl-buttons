---
esphome:
  on_boot:
    priority: -100
    then:
      - delay: $boot_screen_delay
      - lvgl.widget.hide: boot_screen

api:
  encryption:
    key: !secret keyguiton480

logger:
#  level: info
#  logs:
#    i2c.idf: info
#    touchscreen: info
#    scheduler: none

# Time update script - This is run once per second. Use it to update any time related labels.
# script:
#   - id: time_update
#     then:
#       - lvgl.indicator.update:
#           id: second_hand
#           value: !lambda |-
#             return id(homeassistant_time).now().second;
#       - lvgl.indicator.update:
#           id: minute_hand
#           value: !lambda |-
#             return id(homeassistant_time).now().minute;
#       - lvgl.indicator.update:
#           id: hour_hand
#           value: !lambda |-
#             auto now = id(homeassistant_time).now();
#             return std::fmod(now.hour, 12) * 60 + now.minute;
script:
  - id: time_update
    then:
      - lambda: |-
          // No operation

lvgl:
  displays:
    - my_display
  touchscreens:
    - my_touchscreen
  on_idle:
    timeout: $touchscreen_idle_timeout
    then:
      - logger.log: "LVGL is idle"
      - if:
          condition:
            - lambda: 'return id(brightness_mode).state == "Day";'
          then:
            - light.turn_on:
                id: display_backlight
                brightness: ${touchscreen_daytime_brightness_idle}
      - if:
          condition:
            - lambda: 'return id(brightness_mode).state == "Evening";'
          then:
            - light.turn_on:
                id: display_backlight
                brightness: ${touchscreen_nighttime_brightness}
      - if:
          condition:
            - lambda: 'return id(brightness_mode).state == "Night";'
          then:
            - light.turn_off: display_backlight
            - lvgl.pause:
                show_snow: true

# Wake on screen touch
touchscreen:
    on_touch:
      then:
        - logger.log: "LVGL is active"
        - lvgl.resume
        - lvgl.widget.redraw
        - if:
            condition:
              - lambda: 'return id(brightness_mode).state == "Day";'
            then:
              - light.turn_on:
                  id: display_backlight
                  brightness: ${touchscreen_daytime_brightness}
        - if:
            condition:
              - lambda: 'return id(brightness_mode).state == "Evening";'
            then:
              - light.turn_on:
                  id: display_backlight
                  brightness: ${touchscreen_nighttime_brightness}
        - if:
            condition:
              - lambda: 'return id(brightness_mode).state == "Night";'
            then:
              - light.turn_on:
                  id: display_backlight
                  brightness: ${touchscreen_nighttime_brightness}
    on_release:
      then:
        - if:
            condition: lvgl.is_paused
            then:
              - lvgl.resume:
              - lvgl.widget.redraw:

select:
  - platform: template
    name: "Brightness mode"
    id: brightness_mode
    icon: mdi:television-shimmer
    optimistic: true
    options:
      - Day
      - Evening
      - Night
    initial_option: Day
    on_value:
      then:
        - lvgl.resume
        - lvgl.widget.redraw
        - if:
            condition:
              - lambda: 'return id(brightness_mode).state == "Day";'
            then:
              - light.turn_on:
                  id: display_backlight
                  brightness: ${touchscreen_daytime_brightness}
        - if:
            condition:
              - lambda: 'return id(brightness_mode).state == "Evening";'
            then:
              - light.turn_on:
                  id: display_backlight
                  brightness: ${touchscreen_nighttime_brightness}
        - if:
            condition:
              - lambda: 'return id(brightness_mode).state == "Night";'
            then:
              - light.turn_on:
                  id: display_backlight
                  brightness: ${touchscreen_nighttime_brightness}