---
button:
  - platform: restart
    name: "Restart"
    entity_category: config

  - platform: factory_reset
    name: "Factory Reset"
    id: Reset
    entity_category: config

sensor:
  - platform: wifi_signal
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    internal: true

  # Reports the WiFi signal strength in %
  - platform: copy
    id: wifi_signal_db_percent
    source_id: wifi_signal_db
    name: "WiFi Strength"
    icon: mdi:wifi
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
      - throttle: 60s
    unit_of_measurement: "%"
    entity_category: diagnostic
    on_value:
        then:
          - lvgl.label.update:
              id: wifi_signal_db_percent_label
              text:
                format: "Wi-Fi Strength: %.0f%%"
                args: [ 'id(wifi_signal_db_percent).state' ]

  - platform: homeassistant
    id: media_player_volume
    entity_id: media_player.ma_cuisine
    attribute: volume_level
    on_value:
      - lvgl.label.update:
          id: label_media_player_volume
          text: !lambda return std::to_string(int(x * 100)) + "%";

  - platform: homeassistant
    id: media_thumbnail_ready
    entity_id: input_datetime.media_thumbnail_write_done
    on_value:
      - component.update: my_image

#  - platform: homeassistant
#    id: volume_cuisine
#    entity_id: media_player.ma_cuisine
#    attribute: volume_level
#    on_value:
#      - lvgl.slider.update:
#          id: slider_volume_cuisine
#          value: !lambda return (x * 100);

  # - platform: template
  #   id: ha_now_timestamp
  #   on_value: 
  #     then:
  #       - lvgl.label.update:
  #           id: label_button_1_9
  #           text: 
  #             format: "%.0f"
  #             args: ['id(ha_now_timestamp).state']

number:
  - platform: homeassistant
    id: timer_minutes
    entity_id: input_number.timer_minutes

  - platform: homeassistant
    id: timer_heures
    entity_id: input_number.timer_heures

  - platform: homeassistant
    id: timer_finish_timestamp
    entity_id: input_number.timer_custom_finish_number
    # on_value: 
    #     then:
    #       - lvgl.label.update:
    #           id: label_button_1_7
    #           text:
    #             format: "%.0f"
    #             args: ['id(timer_finish_timestamp).state']

  - platform: homeassistant
    id: timer_seconds
    entity_id: input_number.timer_seconds

binary_sensor:
  - platform: status
    name: "Status"
    icon: mdi:check-network-outline
    entity_category: diagnostic

datetime:
  - platform: template
    id: timer_remaining_datetime
    type: datetime
    optimistic: yes
    initial_value: "2025-01-01 00:00:00"
    on_value:
      then:
        - lvgl.label.update:
            id: label_button_1_7
            text: 
                time_format: "%Y-%m-%d %H:%M:%S"
                time: !lambda return x;

text_sensor:
  - platform: homeassistant
    id: timer_status
    entity_id: timer.timer_custom
    on_value: 
      then:
        - if:
            condition:
              lambda: 'return id(timer_status).state == "idle";'
            then:
              - lvgl.buttonmatrix.update:
                  id: bm_timer
                  state:
                    disabled: false
                  items:
                    bg_color: 0x844269
                    bg_grad_color: 0x63324F
              - delay: 1s
              - lvgl.label.update:
                  id: label_button_4_1
                  text: "00:00:00"
        - if:
            condition:
              lambda: 'return id(timer_status).state == "active";'
            then:
              - lvgl.buttonmatrix.update:
                  id: bm_timer
                  state:
                    disabled: true
                  items:
                    bg_color: 0xB0ABAA
                    bg_grad_color: 0xB0ABAA
        - lvgl.label.update:
            id: label_button_1_6
            text: !lambda return id(timer_status).state;

  - platform: homeassistant
    id: media_source
    entity_id: media_player.ma_cuisine
    attribute: media_content_id

  - id: media_thumbnail
    platform: homeassistant
    entity_id: media_player.ma_cuisine
    attribute: entity_picture
#    on_value:
#      then:
#        - delay: 
#            seconds: 10
#        - component.update: my_image
      

  - id: media_shuffle
    platform: homeassistant
    entity_id: media_player.ma_cuisine
    attribute: shuffle
    on_value:
      - if:
          condition:
            lambda: 'return id(media_shuffle).state == "on";'
          then:
            - lvgl.label.update:
                id: icon_button_3_1
                text: $shuffle_icon
          else:
            - lvgl.label.update:
                id: icon_button_3_1
                text: $noshuffle_icon

  - id: media_song_title
    platform: homeassistant
    entity_id: media_player.ma_cuisine
    attribute: media_title
    on_value:
#      - lvgl.label.update:
#          id: label_song
#          text: !lambda return "Song: " + id(media_song_title).state;
      - then:
          lambda: |-
            auto concatsong = "Song: " + id(media_song_title).state;
            auto call2 = id(song_text).make_call();
            call2.set_value(concatsong);
            call2.perform();

  - id: media_album_title
    platform: homeassistant
    entity_id: media_player.ma_cuisine
    attribute: media_album_name
    on_value:
#      - lvgl.label.update:
#          id: label_album
#          text: !lambda return "Album: " + id(media_album_title).state;
      - then:
          lambda: |-
            if (id(media_source).state.substr(0,4) == "ytmu") {
              auto concatalbum = "Album: ";
              auto call2 = id(album_text).make_call();
              call2.set_value(concatalbum);
              call2.perform();
            } else {
              auto concatalbum = "Album: " + id(media_album_title).state;
              auto call2 = id(album_text).make_call();
              call2.set_value(concatalbum);
              call2.perform();
            }

  - id: media_artist_title
    platform: homeassistant
    entity_id: media_player.ma_cuisine
    attribute: media_artist
    on_value:
      - then:
          lambda: |-
            auto concatartist = "Artist: " + id(media_artist_title).state;
            auto call2 = id(artist_text).make_call();
            call2.set_value(concatartist);
            call2.perform();


  - platform: homeassistant
    id: timer_finish
    entity_id: input_text.timer_custom_finishtime
    on_value: 
      then:
        - lvgl.label.update:
            id: label_button_1_8
            text: !lambda return id(timer_finish).state;
        - lambda: |-
            auto time_finish = id(timer_finish).state.c_str();
            ESP_LOGD("timer_finish", "timer_finish set: %s", time_finish);
            auto call = id(timer_remaining_datetime).make_call();
            call.set_datetime(time_finish);
            call.perform();
        # - lvgl.label.update:
        #     id: label_button_1_7
        #     text:
        #         time_format: "%Y-%m-%d %H:%M:%S"
        #         time: !lambda return id(timer_remaining_datetime).state_as_esptime();
            
  - platform: version
    id: esphome_version
    name: 'ESPHome Version'
    hide_timestamp: true
    icon: mdi:source-branch
    entity_category: diagnostic

  - platform: template
    id: device_last_restart
    name: 'Last Restart'
    icon: mdi:clock
    entity_category: diagnostic

  - platform: wifi_info
    mac_address:
      id: mac_address
      name: "MAC Address"
      icon: mdi:network-pos
      entity_category: diagnostic
    ip_address:
      id: ip_address
      name: "IP Address"
      icon: mdi:ip-network
      entity_category: diagnostic
      on_value:
        then:
          - lvgl.label.update:
              id: ip_address_label
              text:
                format: "IP Address: %s"
                args: [ 'id(ip_address).state.c_str()' ]
          - lvgl.label.update:
              id: connected_mac_label
              text:
                format: "MAC Address: %s"
                args: [ 'id(mac_address).state.c_str()' ]
          - lvgl.label.update:
              id: esphome_version_label
              text:
                format: "ESPHome Version: %s"
                args: [ 'id(esphome_version).state.c_str()' ]
    ssid:
      id: connected_ssid
      name: "Connected SSID"
      icon: mdi:wifi-check
      entity_category: diagnostic
      on_value:
        then:
          - lvgl.label.update:
              id: connected_ssid_label
              text:
                format: "Connected SSID: %s"
                args: [ 'id(connected_ssid).state.c_str()' ]

  - platform: template
    id: timer_remain_text
    internal: True
#    mode: text
#    optimistic: true
#    min_length: 0
#    max_length: 8
    on_value: 
      then:
        - lvgl.label.update:
            id: label_button_4_1
            text: !lambda return id(timer_remain_text).state;

text:
  - platform: template
    id: song_text
    mode: text
    optimistic: true
    min_length: 0
    max_length: 255
    on_value: 
      then:
        - lvgl.label.update:
            id: label_song
            text: !lambda return id(song_text).state;

  - platform: template
    id: album_text
    mode: text
    optimistic: true
    min_length: 0
    max_length: 255
    on_value: 
      then:
        - lvgl.label.update:
            id: label_album
            text: !lambda return id(album_text).state;

  - platform: template
    id: artist_text
    mode: text
    optimistic: true
    min_length: 0
    max_length: 255
    on_value: 
      then:
        - lvgl.label.update:
            id: label_artist
            text: !lambda return id(artist_text).state;

#  - platform: template
#    id: album_cover_http
#    mode: text
#    optimistic: true
#    min_length: 0
#    max_length: 255
#    on_value: 
#      then:
#        - online_image.release:
#            id: my_image
#        - online_image.set_url:
#            id: my_image
#            url: !lambda return id(album_cover_http).state;
#        - component.update: my_image

online_image:
  - id: my_image
    url: http://192.168.1.13:8123/local/media_thumbnail.png
    format: png
    type: RGB565
    resize: 295x295
    on_download_finished:
      - lvgl.image.update:
          id: ss_currently_playing
          src: my_image
    on_error: 
      then:
        - delay: 
            seconds: 10
        - component.update: my_image

key_collector:
  - id: countdown_reader
    source_id: bm_timer
    min_length: 1
    max_length: 6
    timeout: 180s
    end_keys: "\u009C"
    end_key_required: True
    clear_keys: "\u0008"
#    allowed_keys: "0123456789"
    on_progress:
      - logger.log:
          format: "input progress: '%s', started by '%c'"
          args: [ 'x.c_str()', "(start == 0 ? '~' : start)" ]
      - lambda: |-
          int heures, minutes, secondes;
          heures = 0;
          minutes = 0;
          secondes = 0;
          if (x.length() == 6) {
            heures = std::stoi(x.substr(0,2));
            minutes = std::stoi(x.substr(2,2));
            secondes = std::stoi(x.substr(4,2));
          } else if (x.length() == 5) {
            heures = std::stoi(x.substr(0,1));
            minutes = std::stoi(x.substr(1,2));
            secondes = std::stoi(x.substr(3,2));
          } else if (x.length() == 4) {
            minutes = std::stoi(x.substr(0,2));
            secondes = std::stoi(x.substr(2,2));
          } else if (x.length() == 3) {
            minutes = std::stoi(x.substr(0,1));
            secondes = std::stoi(x.substr(1,2));
          } else if (x.length() == 2) {
            secondes = std::stoi(x.substr(0,2));
          } else if (x.length() == 1) {
            secondes = std::stoi(x.substr(0,1));
          }
          ESP_LOGD("key_collector debug", "Remaining: %02i:%02i:%02i", heures,minutes,secondes);
          id(timer_remain_text).publish_state(str_sprintf("%02i:%02i:%02i", heures, minutes, secondes));
          
    on_result:
      - logger.log:
          format: "input result: '%s', started by '%c', ended by '%c'"
          args: [ 'x.c_str()', "(start == 0 ? '~' : start)", "(end == 0 ? '~' : end)" ]
#      - lvgl.textarea.update:
#          id: text_area_1
#          text: !lambda return x;
      - lambda: |-
          auto heures = 0;
          auto minutes = 0;
          auto secondes = 0;
          if (x.length() == 6) {
            heures = std::stoi(x.substr(0,2));
            minutes = std::stoi(x.substr(2,2));
            secondes = std::stoi(x.substr(4,2));
            ESP_LOGD("key_collector debug", "Remaining: %.0i:%.0i:%.0i", heures,minutes,secondes);
          } else if (x.length() == 5) {
            heures = std::stoi(x.substr(0,1));
            minutes = std::stoi(x.substr(1,2));
            secondes = std::stoi(x.substr(3,2));
            ESP_LOGD("key_collector debug", "Remaining: %.0i:%.0i:%.0i", heures,minutes,secondes);
          } else if (x.length() == 4) {
            minutes = std::stoi(x.substr(0,2));
            secondes = std::stoi(x.substr(2,2));
            ESP_LOGD("key_collector debug", "Remaining: %.0i:%.0i", minutes,secondes);
          } else if (x.length() == 3) {
            minutes = std::stoi(x.substr(0,1));
            secondes = std::stoi(x.substr(1,2));
            ESP_LOGD("key_collector debug", "Remaining: %.0i:%.0i", minutes,secondes);
          } else if (x.length() == 2) {
            secondes = std::stoi(x.substr(0,2));
            ESP_LOGD("key_collector debug", "Remaining: %.0i:%.0i", minutes,secondes);
          } else if (x.length() == 1) {
            secondes = std::stoi(x.substr(0,1));
            ESP_LOGD("key_collector debug", "Remaining: %.0i:%.0i", minutes,secondes);
          }
          auto call = id(timer_heures).make_call();
          call.set_value(heures);
          call.perform();
          auto call3 = id(timer_minutes).make_call();
          call3.set_value(minutes);
          call3.perform();
          auto call2 = id(timer_seconds).make_call();
          call2.set_value(secondes);
          call2.perform();
      - homeassistant.action:
          action: input_number.set_value
          data:
            entity_id: input_number.timer_heures
          data_template:
            value: !lambda return id(timer_heures).state;
      - homeassistant.action:
          action: input_number.set_value
          data:
            entity_id: input_number.timer_minutes
          data_template:
            value: !lambda return id(timer_minutes).state;
      - homeassistant.action:
          action: input_number.set_value
          data:
            entity_id: input_number.timer_seconds
          data_template:
            value: !lambda return id(timer_seconds).state;
      - homeassistant.action:
          action: "script.timer_custom_start"
    on_timeout:
      - logger.log:
          format: "input timeout: '%s', started by '%c'"
          args: [ 'x.c_str()', "(start == 0 ? '~' : start)" ]

select:
  - platform: lvgl
    widget: media_player_playlist_list
    id: media_player_playlist_select
    internal: True
    on_value:
      then:
        - logger.log:
            format: "Chosen option: %s (index %d)"
            args: ["x.c_str()", "i"]
        - lvgl.roller.update:
            id: media_player_playlist_list
            selected_index: !lambda return i;